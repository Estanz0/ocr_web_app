name: 'Infrastructure Pipeline'

on:
  push:
    branches:
      - dev
      - prod

  pull_request:
    branches:
      - dev
      - prod

permissions:
  contents: read

env:
  TF_VERSION: 1.6.3
  TF_CONFIG_DIR: "infrastructure/deploy"
  PROJECT_ID: ocr

jobs:
  get_branch_name:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.set_branch.outputs.branch_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set Branch Name
        id: set_branch
        run: |
          echo "branch_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          if [  -n "${{ github.base_ref }}"  ]; then
            echo "branch_name=${{ github.base_ref }}" >> $GITHUB_OUTPUT
          fi

  terraform:
    needs: get_branch_name
    name: 'Terraform'
    runs-on: ubuntu-latest
    # environment: ${{ needs.get_branch_name.outputs.branch_name }}
    env:
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}
      BRANCH_NAME: ${{ needs.get_branch_name.outputs.branch_name }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Environment
      run: |
        echo Environment / Branch Name
        echo ${{ env.BRANCH_NAME }}
 
    - name: Checkout
      uses: actions/checkout@v3
 
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Prepare ARM Environment Variables
      run: |
        # Parse Azure secret into env variables
        echo "ARM_CLIENT_ID=$( jq -r '.clientId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
        echo "ARM_CLIENT_SECRET=$( jq -r '.clientSecret' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
        echo "ARM_SUBSCRIPTION_ID=$( jq -r '.subscriptionId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
        echo "ARM_TENANT_ID=$( jq -r '.tenantId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform -chdir=${{ env.TF_CONFIG_DIR }} init

    - name: Terraform Workspace
      run: terraform -chdir=${{ env.TF_CONFIG_DIR }} workspace select -or-create ${{ env.BRANCH_NAME }}${{ env.PROJECT_ID }}

    # - name: Terraform Validate
    #   run: terraform -chdir=${{ env.TF_CONFIG_DIR }} fmt -check

    - name: Terraform Plan
      run: terraform -chdir=${{ env.TF_CONFIG_DIR }} plan -out=tfplan -input=false -var-file ${{ env.BRANCH_NAME }}.tfvars -var project_id=${{ env.PROJECT_ID }} -var env=${{ env.BRANCH_NAME }} -var client_id=$ARM_CLIENT_ID -var client_secret=$ARM_CLIENT_SECRET -var subscription_id=$ARM_SUBSCRIPTION_ID -var tenant_id=$ARM_TENANT_ID -var gh_repo_owner=${{ github.repository_owner }} -var gh_repo_name=${{ github.event.repository.name }} -var secret_ocr_api_key=${{ secrets.OCR_API_KEY }}
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        
    - name: Terraform Apply
      if: github.event_name == 'push' && success()
      run: terraform -chdir=${{ env.TF_CONFIG_DIR }} apply -auto-approve -input=false tfplan
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
